
/**
 * This file was generated by TONDev.
 * TONDev is a part of TON OS (see http://ton.dev).
 */
pragma ton-solidity >= 0.35.0;
pragma AbiHeader expire;

// This is class that describes you smart contract.
contract CatToken {

    struct cat {
		string name;
		uint8 age;
        uint8 lives;
	}
    cat[] catArr;
    mapping(uint => uint[]) catToOwner;

    constructor() public {
        require(tvm.pubkey() != 0, 101);
        require(msg.pubkey() == tvm.pubkey(), 102);
        tvm.accept();
    }

    modifier checkOwnerAndAccept {
        require(msg.pubkey() == tvm.pubkey(), 100);
		tvm.accept();
		_;
	}

    function createCat(string name, uint8 age, uint8 lives) public checkOwnerAndAccept {
        for(cat check : catArr) {
            require(check.name != name);
        }
        catArr.push(cat(name, age, lives));
        catToOwner[catArr.length - 1] = [msg.pubkey(), 0];
    }
    
// Цена хранится в mapping в паре с публичным ключом, получается как мета данные токена, если цена == 0, то он не выставлен на продажу, а если > 0, то выставлен
    function sell(uint catId, uint value) public checkOwnerAndAccept {
        require(msg.pubkey() == catToOwner[catId][0], 101);
        require(value != 0);
        catToOwner[catId][1] = value;
    }

    function getCatInfo(uint catId) public view returns(uint cost, bool forSale, string name, uint8 age, uint8 lives) {
        cost = catToOwner[catId][1];
        if (cost == 0){
            forSale = false;
        } else {
            forSale = true;
        }
        name = catArr[catId].name;
        age = catArr[catId].age;
        lives = catArr[catId].lives;
    }

    function getCatArr() public view returns(cat[]) {
        return catArr;
    }
}
